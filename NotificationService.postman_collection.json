{
	"info": {
		"_postman_id": "78ffee38-f88e-4c79-86eb-950c9f877a02",
		"name": "NotificationService",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20466073"
	},
	"item": [
		{
			"name": "SMS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - msg, msgType, and status\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.msg).to.exist;\r",
							"  pm.expect(responseData.msgType).to.exist;\r",
							"  pm.expect(responseData.status).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Msg is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.msg).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Msg should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"MsgType is a valid type\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.msgType).to.be.a('string');\r",
							"    // Add additional checks for specific valid types if needed\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status is a valid status code\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"msg\": \"Test sms\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/sms",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"sms"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUSH",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.msg).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message type is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.msgType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message type should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains all the required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.msg).to.exist;\r",
							"  pm.expect(responseData.msgType).to.exist;\r",
							"  pm.expect(responseData.status).to.exist;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"msg\": \"Test push\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/push",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"push"
					]
				}
			},
			"response": []
		},
		{
			"name": "EMAIL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - msg, msgType, and status\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('msg');\r",
							"    pm.expect(responseData).to.have.property('msgType');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Msg is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.msg).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains all the required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.msg).to.exist;\r",
							"  pm.expect(responseData.msgType).to.exist;\r",
							"  pm.expect(responseData.status).to.exist;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"msg\": \"Test email\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/email",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"email"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var request = {",
					"        url: 'localhost:9090/auth/login',",
					"        method: 'POST',",
					"        header: 'Content-Type:application/json',",
					"        body: {",
					"              mode: 'raw',",
					"              raw: JSON.stringify({",
					"    \"username\": \"admin\",",
					"    \"password\": \"admin\"",
					"})",
					"              }",
					"        ",
					"    };",
					"",
					"    pm.sendRequest(request, function (err, res) {",
					"            if (res !== null) {",
					"                ",
					"                var token = res.json().accessToken;",
					"                pm.environment.set('token', token)",
					"                pm.environment.set('baseUrl', 'localhost:9090/api/notifications')",
					"               ",
					"            }",
					"        });"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "baseUrl",
			"value": "",
			"type": "string"
		}
	]
}